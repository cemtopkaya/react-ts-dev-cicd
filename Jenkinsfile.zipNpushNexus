pipeline {
    agent {
        dockerfile {
            filename 'Dockerfile.build'
            dir '.devcontainer'
            label 'master-jenkins'
            additionalBuildArgs '--build-arg version=1.0.2'
            args '-v /tmp:/tmp -v /var/run/docker.sock:/var/run/docker.sock --network=devnet'
        }
    }

    options {
        skipDefaultCheckout(false)
    }

    parameters {
        separator(name: 'git_settings', sectionHeader: 'GIT SETTINGS')
        string(name: 'GIT_URL', defaultValue: 'file:///tmp/code-repo', description: 'Git URL')
        string(name: 'GIT_BRANCH', defaultValue: 'main', description: 'Main branch of repository')
        string(name: 'GIT_CRED_ID', defaultValue: '', description: 'Git credentials ID')

        separator(name: 'nexus_settings', sectionHeader: 'NEXUS SETTINGS')
        string(name: 'NEXUS_URL', defaultValue: 'http://nexus:8081', description: 'Nexus server URL')
        string(name: 'NEXUS_CRED_ID', defaultValue: 'nexus-cred', description: 'Nexus credentials ID')
        string(name: 'NEXUS_REPO', defaultValue: 'zip-archive', description: 'Nexus repository')
        string(name: 'NEXUS_GROUP', defaultValue: 'com.telenity.portal', description: 'Nexus group')
        string(name: 'NEXUS_ARTIFACT_ID', defaultValue: 'portal-web', description: 'Nexus artifact ID')
        string(name: 'NEXUS_ARTIFACT_VERSION', defaultValue: '1.0.0', description: 'Version of the artifact')
    }

    environment {
        GIT_URL = "${params.GIT_URL}"
        GIT_BRANCH = "${params.GIT_BRANCH}"
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    echo "Checking out from ${env.GIT_URL} on branch ${env.GIT_BRANCH}"
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: env.GIT_BRANCH]],
                        extensions: [],
                        userRemoteConfigs: [[
                            url: env.GIT_URL,
                            credentialsId: params.GIT_CRED_ID ?: null
                        ]]
                    ])
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Build') {
            steps {
                sh 'npm run build'
            }
        }

        stage('Zip and Upload to Nexus') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: params.NEXUS_CRED_ID,
                        usernameVariable: 'NEXUS_USER',
                        passwordVariable: 'NEXUS_PASS'
                    )]) {
                        // package.json'dan değerleri oku
                        def artifactId = params.NEXUS_ARTIFACT_ID ?: sh(script: 'jq -r .name package.json', returnStdout: true).trim()
                        def artifactVersion = params.NEXUS_ARTIFACT_VERSION ?: sh(script: 'jq -r .version package.json', returnStdout: true).trim()

                        echo "Artifact ID: ${artifactId}"
                        echo "Artifact Version: ${artifactVersion}"

                        sh """
                            printenv
                            echo "Artifact ID: ${artifactId}"
                            echo "Artifact Version: ${artifactVersion}"
                            echo "Nexus URL: ${params.NEXUS_URL}"
                            echo "Nexus Repository: ${params.NEXUS_REPO}"
                            echo "Nexus Group: ${params.NEXUS_GROUP}"

                            zip -r ${artifactId}-${artifactVersion}.zip dist/

                            # Upload to Nexus
                            curl -v -u ${env.NEXUS_USER}:${env.NEXUS_PASS} \\
                                --upload-file ${artifactId}-${artifactVersion}.zip \\
                                "${params.NEXUS_URL}/repository/${params.NEXUS_REPO}/${params.NEXUS_GROUP.replace('.', '/')}/${artifactId}/${artifactVersion}/${artifactId}-${artifactVersion}.zip"
                        """
                    }
                }
            }
        }

        // stage('Zip and Upload to Nexus') {
        //     environment {
        //         NEXUS_ARTIFACT_ID = "${params.NEXUS_ARTIFACT_ID}"
        //         NEXUS_ARTIFACT_VERSION = "${params.NEXUS_ARTIFACT_VERSION}"
        //     }
        //     steps {
        //         script {
        //             withCredentials([usernamePassword(
        //                 credentialsId: params.NEXUS_CRED_ID,
        //                 usernameVariable: 'NEXUS_USER',
        //                 passwordVariable: 'NEXUS_PASS'
        //             )]) {
        //                 // Zip the artifact
        //                 sh 'printenv'
        //                 sh 'jq -r .name package.json'
        //                 sh 'jq -r .version package.json'
        //                 def cem = sh(script: 'jq -r .name package.json', returnStdout: true).trim()
        //                 echo "Artifact ID cem: ${cem}"
        //                 def cenk = sh(
        //                         script: 'jq -r .name package.json',
        //                         returnStdout: true
        //                     ).trim()
        //                 echo "Artifact ID cenk: ${cenk}"

        //                 // Örnek: bir shell komutunun çıktısını MY_ENV_VAR adlı ortam değişkenine atama
        //                 env.MY_ENV_VAR = sh(
        //                     script: 'echo "Merhaba Dünya"',
        //                     returnStdout: true
        //                 ).trim()
        //                 echo "MY_ENV_VAR: ${env.MY_ENV_VAR}"

        //                 if (!env.NEXUS_ARTIFACT_ID) {
        //                     echo "if icinde > env: ${env}"
        //                     echo "if icinde > env.NEXUS_ARTIFACT_ID: ${env.NEXUS_ARTIFACT_ID}"
        //                     env.NEXUS_ARTIFACT_ID = sh(
        //                         script: 'jq -r .name package.json',
        //                         returnStdout: true
        //                     ).trim()
        //                     echo "if icinde > yeni > env: ${env}"
        //                     echo "if icinde > yeni > env.NEXUS_ARTIFACT_ID: ${env.NEXUS_ARTIFACT_ID}"
        //                 }

        //                 if (env.NEXUS_ARTIFACT_VERSION == "" || env.NEXUS_ARTIFACT_VERSION == null) {
        //                     echo "if icinde Artifact ID: ${env.NEXUS_ARTIFACT_VERSION}"
        //                     env.NEXUS_ARTIFACT_VERSION = sh(script: 'jq -r .version package.json', returnStdout: true).trim()
        //                     echo "yeni Artifact ID: ${env.NEXUS_ARTIFACT_VERSION}"
        //                 }

        //                 sh """
        //                     printenv
        //                     echo "Artifact ID: \$NEXUS_ARTIFACT_ID"
        //                     echo "Artifact Version: \$NEXUS_ARTIFACT_VERSION"
        //                     echo "Nexus URL: ${params.NEXUS_URL}"
        //                     echo "Nexus Repository: ${params.NEXUS_REPO}"
        //                     echo "Nexus Group: ${params.NEXUS_GROUP}"

        //                     zip -r \$NEXUS_ARTIFACT_ID-\$NEXUS_ARTIFACT_VERSION.zip dist/

        //                     # Upload to Nexus
        //                     curl -v -u ${env.NEXUS_USER}:${env.NEXUS_PASS} \
        //                         --upload-file ${params.NEXUS_ARTIFACT_ID}-${env.NEXUS_ARTIFACT_VERSION}.zip \
        //                         "${params.NEXUS_URL}/repository/${params.NEXUS_REPO}/${params.NEXUS_GROUP.replace('.', '/')}/${params.NEXUS_ARTIFACT_ID}/${env.NEXUS_ARTIFACT_VERSION}/${params.NEXUS_ARTIFACT_ID}-${env.NEXUS_ARTIFACT_VERSION}.zip"
        //                 """
        //             }
        //         }
        //     }
        // }
    }

    post {
        always {
            echo 'Pipeline completed. Cleaning up...'
        }
    }
}