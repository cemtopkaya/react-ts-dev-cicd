FROM jenkins/jenkins:2.492.3-jdk17
MAINTAINER Telenity Software Architecture Group <arch@telenity.com>

# set default user attributes
ENV JENKINS_UID=1000
ENV JENKINS_GID=1000
ENV JENKINS_HOME="/var/jenkins_home"

# add ability to run docker from within jenkins (docker in docker)
USER root
RUN apt-get update && apt-get install -y lsb-release sudo
RUN curl -fsSLo /usr/share/keyrings/docker-archive-keyring.asc \
  https://download.docker.com/linux/debian/gpg
RUN echo "deb [arch=$(dpkg --print-architecture) \
  signed-by=/usr/share/keyrings/docker-archive-keyring.asc] \
  https://download.docker.com/linux/debian \
  $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list
RUN apt-get update && \
    apt-get install -y \
      docker-ce-cli \
      net-tools \
      iputils-ping \
      iproute2 \
      tree \
      nano \
      zip \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*-3

COPY plugins.txt /usr/share/jenkins/ref/plugins.txt
# RUN java -jar jenkins-plugin-manager-*.jar --war /your/path/to/jenkins.war --plugin-download-directory /your/path/to/plugins/ --plugin-file /your/path/to/plugins.txt --plugins delivery-pipeline-plugin:1.3.2 deployit-plugin

# Jenkins kullanıcısının UID ve GID'sini değiştir
# Macos içinde kullanıcının ID değeri 502 ve paylaşılan dizine yazılabilsin diye jenkins 
# kullanıcısının UID değerini 502 olarak değiştiriyoruz
RUN usermod -u 502 jenkins 
# RUN groupmod -g 1000 jenkins

# Jenkins home dizininin sahipliğini yeni UID/GID'ye göre değiştir
RUN chown -R jenkins:jenkins /var/jenkins_home /usr/share/jenkins/ref

USER jenkins
RUN jenkins-plugin-cli --plugin-file /usr/share/jenkins/ref/plugins.txt

# add entrypoint script
COPY docker-entrypoint.sh /docker-entrypoint.sh

# normally user would be set to jenkins, but this is handled by the docker-entrypoint script on startup
#USER jenkins
USER root
RUN chmod +x /docker-entrypoint.sh

# Git için güvenli dizin ayarını ekle
# git checkout yapılırken alınan hataları engellemek için
RUN git config --global --add safe.directory '*'

ENV JAVA_OPTS="-Djava.awt.headless=true -Djenkins.install.runSetupWizard=false -Dpermissive-script-security.enabled=true -Dhudson.security.csrf.DefaultCrumbIssuer.EXCLUDE_SESSION_ID=true -Dhudson.model.UpdateCenter.never=true"
#-----------------------------------------------------------
# Jenkins configuration
# https://www.jenkins.io/doc/book/installing/initial-settings/
# ENV JENKINS_OPTS --httpPort=-1 --httpsPort=8083 --httpsCertificate=/var/lib/jenkins/cert --httpsPrivateKey=/var/lib/jenkins/pk
ENV JENKINS_KULLANICI="admin" 
ENV JENKINS_SIFRE="admin"
ENV JENKINS_HTTP_PORT=8090
ENV JENKINS_HTTP_ADDRESS="0.0.0.0"
ENV JENKINS_OPTS="--httpPort=$JENKINS_HTTP_PORT --httpListenAddress=$JENKINS_HTTP_ADDRESS --argumentsRealm.roles.$JENKINS_KULLANICI=admin --argumentsRealm.passwd.$JENKINS_KULLANICI=$JENKINS_SIFRE"
#-----------------------------------------------------------

ENV JENKINS_UC=https://updates.jenkins-ci.org
ENV JENKINS_UC_DOWNLOAD=${JENKINS_UC}/download
ENV JENKINS_UC_EXPERIMENTAL=https://updates.jenkins.io/experimental
ENV JENKINS_INCREMENTALS_REPO_MIRROR=https://repo.jenkins-ci.org/incrementals

# RUN chmod -R 777 /var/jenkins_home/plugins



# bypass normal entrypoint and use custom one
# ENTRYPOINT ["/usr/bin/tini", "--", "/docker-entrypoint.sh"]