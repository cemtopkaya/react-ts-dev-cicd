services:
  devcontainer:
    container_name: devcontainer
    image: telenity/devcontainer/react:latest
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - ..:/workspace:cached
      - /var/run/docker.sock:/var/run/docker.sock
    command: sleep infinity
    environment:
      - PYTHONPATH=/workspace
    networks:
      - devnet
  
  sonar:
    container_name: sonar
    image: sonarqube:community
    environment:
      - SONAR_SEARCH_JAVAOPTS=-Xms2g -Xmx4g
    #   - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonar
    #   - SONAR_JDBC_USERNAME=sonar
    #   - SONAR_JDBC_PASSWORD=sonar
    deploy:
      resources:
        limits:
          # Sonar içinde Elasticsearch ve gömülü bir DB taşıdığı için büyük bir bellek ihtiyacı var
          memory: 4g
          cpus: 2
    ports:
      - "34000:9000"
      - "39000:9000"
    networks:
      - devnet

  jenkins:
    container_name: cicd-jenkins
    build:
      context: ./services/jenkins
      dockerfile: Dockerfile.jenkins
    image: telenity/devops/jenkins:2.492.3
    restart: unless-stopped
    privileged: true
    networks:
      - devnet
    ports:
      - "50000:50000"
      - "8888:8080"
    environment:
      TZ: "Europe/Istanbul"
      # -Xmx16g -Xms16g -Djava.io.tmpdir=/var/jenkins_home/tmp
      # https://www.jenkins.io/doc/book/installing/initial-settings/
      # - JAVA_OPTS=-Djenkins.install.runSetupWizard=false  # Kurulum sihirbazını atla (test için)
      JAVA_OPTS: -Dhudson.plugins.git.GitSCM.ALLOW_LOCAL_CHECKOUT=true -Djava.awt.headless=true -Dpermissive-script-security.enabled=true -Djenkins.install.runSetupWizard=false -Dhudson.model.DirectoryBrowserSupport.CSP="sandbox allow-same-origin; default-src 'self'; img-src 'self'; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline';"
      JENKINS_OPTS: "--httpPort=8080 --httpListenAddress=0.0.0.0 --argumentsRealm.roles.YONETICI=admin --argumentsRealm.passwd.YONETICI=SIFRE"
      # Kullanıcı adı ve şifreyi burada admin ve admin olarak ayarlıyoruz
      CASC_JENKINS_CONFIG: /tmp/jenkins_home/casc_configs/jenkins_config.yaml
      # docker.sock dosyasını mount ettiğimiz için docker'ı host üzerinde çalıştırabiliriz
      # DOCKER_HOST: "tcp://host.docker.internal:2375"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./services/jenkins/volume/jenkins_home:/var/jenkins_home
      - ./services/jenkins/volume/casc_configs/jenkins_config.yaml:/tmp/jenkins_home/casc_configs/jenkins_config.yaml:ro
      - ..:/tmp/code-repo
      # - ./jenkins/home:/var/jenkins_home
      # - ./jenkins/secrets:/var/jenkins_home/secrets

  nexus:
    container_name: nexus
    image: sonatype/nexus3:latest
    restart: unless-stopped
    networks:
      - devnet
    ports:
      - "8081:8081"  # Nexus web arayüzü
      - "8082:8082"  # Docker repository için (opsiyonel)
    # volumes:
    #   - ./services/nexus/volume/data:/nexus-data
    environment:
      - INSTALL4J_ADD_VM_PARAMS=-Xms1g -Xmx2g -XX:MaxDirectMemorySize=2g -Dapplication-host=0.0.0.0
    deploy:
      resources:
        limits:
          memory: 4g
          
networks:
  devnet:
    name: devnet
    driver: bridge
    ipam:
      config:
        - subnet: 172.16.3.0/24