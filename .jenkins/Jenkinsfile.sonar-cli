/* groovylint-disable-next-line CompileStatic */
pipeline {
    agent {
        dockerfile {
            filename 'Dockerfile.build'
            dir '.devcontainer'
            label 'master-jenkins'
            additionalBuildArgs  '--build-arg version=1.0.2'
            args '-v /tmp:/tmp -v /var/run/docker.sock:/var/run/docker.sock --network=devnet'
        }
    }

    options {
        // Otomatik checkout istemiyorsak yani elle checkout yapacaksak skipDefaultCheckout(true)
        // Otomatik checkout yapılacaksa yani (Pipeline script from SCM/Multibranch ise) skipDefaultCheckout(true),
        skipDefaultCheckout(false)
    }

    parameters {
        separator(name: 'git_settings', sectionHeader: 'GIT SETTTINGS')
        string(name: 'GIT_URL', defaultValue: 'https://github.com/cemtopkaya/react-ts-dev-cicd.git', description: 'Git URL')
        string(name: 'GIT_BRANCH', defaultValue: 'main', description: 'Main branch of repository')
        string(name: 'GIT_SOURCE_BRANCH', defaultValue: 'feature/jenkins', description: 'Source branch to merge from')
        string(name: 'GIT_TARGET_BRANCH', defaultValue: 'main', description: 'Target branch to merge into')
        string(name: 'GIT_CRED_ID', defaultValue: '', description: 'Git credentials ID')

        separator(name: 'sonarqube_settings', sectionHeader: 'SonarQube SETTTINGS')
        string(name: 'SQ_URL', defaultValue: 'http://sonar.telenity.com', description: 'SonarQube server URL')
        string(name: 'SQ_CRED_ID', defaultValue: 'jenkins-sonar', description: 'SonarQube credential')
        string(name: 'SQ_PROJECT_KEY', defaultValue: 'react-diff', description: 'SonarQube project key')
        string(name: 'SQ_PROJECT_NAME', defaultValue: 'React Diff', description: 'SonarQube project name')
    }

    environment {
        GIT_URL = "${params.GIT_URL}"
        GIT_BRANCH = "${params.GIT_BRANCH}"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout Code') {
            steps {
                script {
                    echo "Checking out from ${env.GIT_URL} on branch ${env.GIT_BRANCH}"

                    if (params.GIT_CRED_ID?.trim()) {
                        git(
                            url: env.GIT_URL,
                            branch: env.GIT_BRANCH,
                            credentialsId: params.GIT_CRED_ID
                        )
                    } else {
                        git(
                            url: env.GIT_URL,
                            branch: env.GIT_BRANCH
                        )
                    }
                }
            }
        }

        stage('SonarQube scan') {
            steps {
                script {
                    /*
                        Jenkins sunucusunda Configuration->Sonarqube Server kısmında
                        "local-sonar" isimli SonarQube sunucusu tanımlanmış olmalı.
                        SonarQube sunucusuna erişim için gerekli credential,
                        SonarQube sunucusunda (örn. http://sonar:9000) Administration->Security->Users
                        içinde bir token olarak tanımlanmalı ve bu token Jenkins'e credential olarak eklenmiş olmalı.
                    */
                    withSonarQubeEnv('local-sonar') {
                        /**
                            withSonarQubeEnv Fonksiyonu aşağıdaki değişkenleri ortam değişkenlerine enjecte eder:
                            SONAR_EXTRA_PROPS=-X
                            SONAR_MAVEN_GOAL=local-sonar
                            SONARQUBE_SCANNER_PARAMS={ "sonar.host.url" : "http:\/\/sonar:9000", "sonar.token" : "******"}
                            SONAR_AUTH_TOKEN=******
                            SONAR_CONFIG_NAME=local-sonar
                            SONAR_HOST_URL=http://sonar:9000
                        */

                        // İster yapılandırma aracınızı kullanarak çağırın:
                        // sh 'npm run sonar:cicd'

                        // İster sonar-scanner CLI aracını kullanarak çağırın:
                        sh """
                            echo -----------------------
                            echo SONAR_PROJECT_KEY: \$SONAR_PROJECT_KEY
                            echo SONAR_PROJECT_NAME: \$SONAR_PROJECT_NAME
                            echo SONAR_HOST_URL: \$SONAR_HOST_URL
                            echo SONAR_AUTH_TOKEN: \$SONAR_AUTH_TOKEN
                            echo SONAR_MAVEN_GOAL: \$SONAR_MAVEN_GOAL
                            echo SONARQUBE_SCANNER_PARAMS: \$SONARQUBE_SCANNER_PARAMS
                            echo SONAR_SCANNER_JSON_PARAMS: \$SONAR_SCANNER_JSON_PARAMS
                            echo SONAR_CONFIG_NAME: \$SONAR_CONFIG_NAME
                            echo -----------------------
                        """

                        sh """
                            sonar-scanner \
                            -Dsonar.projectKey=${params.SQ_PROJECT_KEY} \
                            -Dsonar.projectName=${params.SQ_PROJECT_NAME} \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=${env.SONAR_HOST_URL} \
                            -Dsonar.login=${env.SONAR_AUTH_TOKEN}
                        """
                    }

                    timeout(time: 1, unit: 'HOURS') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }
    }
}
