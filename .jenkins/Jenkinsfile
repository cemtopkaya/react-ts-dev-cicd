/* groovylint-disable-next-line CompileStatic */
pipeline {
    agent {
        dockerfile {
            filename 'Dockerfile.build'
            dir '.devcontainer'
            label 'master-jenkins'
            additionalBuildArgs  '--build-arg version=1.0.2'
            args '-v /tmp:/tmp -v /var/run/docker.sock:/var/run/docker.sock --network=devnet'
        }
    }

    options {
        // Otomatik checkout istemiyorsak yani elle checkout yapacaksak skipDefaultCheckout(true)
        // Otomatik checkout yapılacaksa yani (Pipeline script from SCM/Multibranch ise) skipDefaultCheckout(true),
        skipDefaultCheckout(false)
    }

    parameters {
        separator(name: 'jenkinsfile_settings', sectionHeader: 'JENKINSFILE SETTTINGS')
        booleanParam(name: 'DEBUG', defaultValue: false, description: 'Enable debug mode')
        booleanParam(name: 'SONARQUBE_SCAN', defaultValue: true, description: 'Enable SonarQube scan')

        separator(name: 'git_settings', sectionHeader: 'GIT SETTTINGS')
        string(name: 'GIT_URL', defaultValue: 'file:///tmp/code-repo', description: 'Git URL')
        // string(name: 'GIT_URL', defaultValue: 'https://github.com/cemtopkaya/react-ts-dev-cicd.git', description: 'Git URL')
        string(name: 'GIT_BRANCH', defaultValue: 'main', description: 'Main branch of repository')
        string(name: 'GIT_SOURCE_BRANCH', defaultValue: 'feature/jenkins', description: 'Source branch to merge from')
        string(name: 'GIT_TARGET_BRANCH', defaultValue: 'main', description: 'Target branch to merge into')
        string(name: 'GIT_CRED_ID', defaultValue: '', description: 'Git credentials ID')

        separator(name: 'sonarqube_settings', sectionHeader: 'SonarQube SETTTINGS')
        string(name: 'SQ_URL', defaultValue: 'http://sonar.telenity.com', description: 'SonarQube server URL')
        string(name: 'SQ_CRED_ID', defaultValue: 'jenkins-sonar', description: 'SonarQube credential')
        string(name: 'SQ_PROJECT_KEY', defaultValue: 'react-diff', description: 'SonarQube project key')
        string(name: 'SQ_PROJECT_NAME', defaultValue: 'React Diff', description: 'SonarQube project name')

        separator(name: 'nexus_settings', sectionHeader: 'NEXUS COMMON SETTINGS')
        string(name: 'NEXUS_URL', defaultValue: 'http://nexus:8081', description: 'Nexus server URL')
        string(name: 'NEXUS_CRED_ID', defaultValue: '', description: 'Nexus credentials ID')
        string(name: 'NEXUS_GROUP', defaultValue: 'com.telenity.portal', description: 'Nexus group (e.g., com.example)')
        string(name: 'NEXUS_ARTIFACT_ID', defaultValue: '', description: 'Nexus artifact ID (e.g. portal-web). If not provided, it will be read from package.json')
        string(name: 'NEXUS_ARTIFACT_VERSION', defaultValue: '', description: 'Version of the artifact (e.g. 1.0.0). If not provided, it will be read from package.json')

        separator(name: 'nexus_settings', sectionHeader: 'NEXUS ZIP REPOSITORY SETTINGS')
        string(name: 'NEXUS_ZIP_REPO', defaultValue: '', description: 'Nexus repository (e.g., maven-releases or maven-snapshots)')

        separator(name: 'nexus_docker_settings', sectionHeader: 'NEXUS DDOCKER REGISTRY SETTINGS')
        string(name: 'NEXUS_DOCKER_REGISTRY', defaultValue: 'nexus:8081', description: 'Nexus docker registry URL')
        string(name: 'DOCKER_IMAGE_NAME', defaultValue: 'nexus:8081/telenity/portal/admin-portal:latest', description: 'Docker image name (e.g. com.telenity.portal/portal-web:latest). If not provided, it will be read from package.json')
    }

    environment {
        GIT_URL = "${params.GIT_URL}"
        GIT_BRANCH = "${params.GIT_BRANCH}"
    }

    // tools {
    //     sonarQubeScanner 'SonarQube Scanner 4.8.0.2856'
    // }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout Code') {
            steps {
                script {
                    echo "Checking out from ${env.GIT_URL} on branch ${env.GIT_BRANCH}"
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: env.GIT_BRANCH]],
                        extensions: [],
                        userRemoteConfigs: [[
                            url: env.GIT_URL,
                            credentialsId: params.GIT_CRED_ID ?: null
                        ]]
                    ])
                }
            }
        }

        stage('Install Package Dependencies') {
            steps {
                script {
                    sh 'npm install'
                }
            }
        }

        stage('Build Project') {
            steps {
                script {
                    sh 'npm run build'
                }
            }
        }

        stage('SonarQube scan') {
            when {
                expression { params.SONARQUBE_SCAN }
            }
            steps {
                script {
                    /*
                        İster withSonarQubeEnv ile SonarQube sunucu bilgilerini environment değişkenlerine inject edin,
                        ister .env.cicd dosyasını kullanın,
                        ister Jenkins stage environment kısmında environment değişkenlerini tanımlayın
                        +
                        sonar-cicd.properties dosyasının bilgilerini de scanner'a inject edin.
                    */
                    
                    // Sonarqube analizini başlat
                    sh 'npm run sonar:cicd'
                }
            }
        }

        stage('SonarQube Quality Gate') {
            when {
                expression { params.SONARQUBE_SCAN }
            }
            steps {
                script {
                    // Sonarqube quality gate kontrolü
                    def envVars = readProperties file: '.env.cicd'
                    def SONAR_TOKEN = envVars['SONAR_TOKEN']
                    def SONAR_HOST_URL = envVars['SONAR_HOST_URL']
                    echo "SonarQube URL: ${SONAR_HOST_URL}"
                    echo "SonarQube Token: ${SONAR_TOKEN}"

                    def sonarProps = readProperties file: 'sonar-cicd.properties'
                    def SONAR_PROJECT_KEY = sonarProps['sonar.projectKey']
                    echo "SonarQube Project Key: ${SONAR_PROJECT_KEY}"

                    def url = "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=${SONAR_PROJECT_KEY}"
                    echo "SonarQube Quality Gate URL: ${url}"
                    def curl = "curl -s -u ${SONAR_TOKEN}: ${url}"
                    echo "SonarQube Quality Gate curl command: ${curl}"

                    def response = sh(
                        script: curl,
                        returnStdout: true
                    ).trim()

                    echo "SonarQube Quality Gate status: ${url}"
                    echo "SonarQube response: ${response}"

                    if (response == null || response == '') {
                        error('SonarQube Quality Gate failed: response is null or empty')
                    }

                    def json = readJSON text: response
                    if (json.projectStatus.status == 'ERROR') {
                        error("SonarQube Quality Gate failed: status is ${json.projectStatus.status}")
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    sh 'npm run test:run:coverage'
                }
            }
        }
        stage('Coverage Check') {
            steps {
                script {
                    sh 'npm run coverage:newcode'
                }
            }
        }

        stage('Zip and Upload to Nexus') {
            steps {
                script {
                    // ---------------------------------------------------
                    // Zip the dist folder and upload to Nexus
                    // ---------------------------------------------------

                    withCredentials([usernamePassword(
                        credentialsId: params.NEXUS_CRED_ID,
                        usernameVariable: 'nexusUser',
                        passwordVariable: 'nexusPass'
                    )]) {
                        // properties içinde değer verilmemişse package.json'dan değerleri oku
                        artifactId = params.NEXUS_ARTIFACT_ID ?: sh(script: 'jq -r .name package.json', returnStdout: true).trim()
                        artifactVersion = params.NEXUS_ARTIFACT_VERSION ?: sh(script: 'jq -r .version package.json', returnStdout: true).trim()
                        // groupPath = params.NEXUS_GROUP
                        groupPath = params.NEXUS_GROUP.replace('.', '/')
                        
                        sh """
                            if (${params.DEBUG.toBoolean()}) {
                                printenv
                                echo "Nexus URL: ${params.NEXUS_URL}"
                                echo "Nexus ZIP Repository: ${params.NEXUS_ZIP_REPO}"
                                echo "Nexus Group: ${groupPath}"
                                echo "Artifact ID: ${artifactId}"
                                echo "Artifact Version: ${artifactVersion}"
                            }

                            zip -r ${artifactId}-${artifactVersion}.zip dist/

                            # Upload to Nexus
                            curl -v -u ${nexusUser}:${nexusPass} \\
                                --upload-file ${artifactId}-${artifactVersion}.zip \\
                                "${params.NEXUS_URL}/repository/${params.NEXUS_ZIP_REPO}/${groupPath}/${artifactId}/${artifactVersion}/${artifactId}-${artifactVersion}.zip"
                        """
                    }
                }
            }
        }

        stage('Build-Scan-Push Docker Image') {
            steps {
                // ---------------------------------------------------
                // Docker image build
                // Docker image scan using Trivy: 
                //    https://www.jenkins.io/doc/book/pipeline/syntax/#docker
                // Docker push to Nexus
                // ---------------------------------------------------
                script {
                    dir("${WORKSPACE}/.release") {

                        // properties içinde değer verilmemişse package.json'dan değerleri oku
                        def artifactId = params.NEXUS_ARTIFACT_ID ?: sh(script: 'jq -r .name ../package.json', returnStdout: true).trim()
                        def artifactVersion = params.NEXUS_ARTIFACT_VERSION ?: sh(script: 'jq -r .version ../package.json', returnStdout: true).trim()
                        // def groupPath = params.NEXUS_GROUP.replace('.', '/')
                        def groupPath = params.NEXUS_GROUP

                        def dockerImageName = params.DOCKER_IMAGE_NAME ?: "${params.NEXUS_DOCKER_REGISTRY}/${groupPath}/${artifactId}:${artifactVersion}"

                        sh """
                            cp -r ../dist/ ./
                            pwd
                            ls -al .
                            docker images
                            docker build \
                                -t ${dockerImageName} \
                                -f Dockerfile.release \
                                .
                            docker images
                        """

                        // --------------- Trivy scan -------------------------
                        // --skip-update : "update database" ile uğraşmasın
                        // --severity HIGH,CRITICAL: sadece yüksek riskli açıklar gelsin
                        // --format json --output report.json: Raporu JSON formatında al
                        // --no-progress: Ekranda gereksiz loading barı çıkmasın
                        // --exit-code 1: Eğer hata bulursa exit 1 yapar ve Jenkins stage'ı FAIL olsun
                        // -----------------------------------------------------

                        def scanExitCode = sh(
                            script: """
                                trivy image \
                                    --ignorefile .trivyignore \
                                    --severity HIGH,CRITICAL \
                                    --ignore-unfixed \
                                    --no-progress \
                                    --exit-code 1 \
                                    ${dockerImageName}
                            """,
                            returnStatus: true // Return exit code but don't fail the build
                        )

                        // Raporu JSON formatında al ve ekrana yazdır (tee komutu ile)
                        sh "trivy image --format json ${dockerImageName} | tee trivy-report.json"

                        if (scanExitCode != 0) {
                            error("Trivy scan failed with exit code ${scanExitCode}")
                        }

                        // ----------- Push Docker image to registry ---------
                        // There are two ways to push Docker images to Nexus:
                        // 1. Using docker.withRegistry
                        // 2. Using withCredentials and docker login
                        // ---------------------------------------------------

                        // docker.withRegistry("${params.NEXUS_DOCKER_REGISTRY}", "${params.NEXUS_CRED_ID}") {
                        //     echo "Pushing Docker image ${dockerImageName} to Nexus"
                        //     sh "docker image push ${dockerImageName}"
                        // }
 
                        withCredentials([usernamePassword(
                            credentialsId: "${params.NEXUS_CRED_ID}", 
                            usernameVariable: 'USERNAME', 
                            passwordVariable: 'PASSWORD')]) {
                            sh """
                                # docker login -u $USERNAME -p $PASSWORD http://nexus:8081
                                docker push ${dockerImageName}
                            """
                        }
                    }
                }
            }
        }

        stage('Merge to Main') {
            steps {
                script {
                    sh """
                        git config --global user.email ""
                        git config --global user.name "Jenkins"
                        git checkout -b ${params.GIT_TARGET_BRANCH}
                        git merge --no-ff ${params.GIT_SOURCE_BRANCH}
                    """
                }
            }
        }

        stage("konteyneri temizle") {
            steps {
                cleanWs()
            }
        }
    }
    // Buraya tekrar bakılacak: https://www.jenkins.io/doc/book/pipeline/syntax/#post-conditions
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
        always {
            echo 'Cleaning up...'
            // cleanWs()

        // cleanWs(cleanWhenNotBuilt: false,
        //         deleteDirs: true,
        //         disableDeferredWipeout: true,
        //         notFailBuild: true,
        //         patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
        //                    [pattern: '.propsfile', type: 'EXCLUDE']])
        }
        unstable {
            echo 'Pipeline is unstable!'
        }
    }
}
