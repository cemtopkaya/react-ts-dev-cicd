pipeline {
    agent {
        dockerfile {
            filename 'Dockerfile.build'
            dir '.devcontainer'
            label 'master-jenkins'
            additionalBuildArgs '--build-arg version=1.0.2'
            args '-v /tmp:/tmp -v /var/run/docker.sock:/var/run/docker.sock --network=devnet'
        }
    }

    options {
        skipDefaultCheckout(false)
    }

    parameters {
        separator(name: 'git_settings', sectionHeader: 'GIT SETTINGS')
        string(name: 'GIT_URL', defaultValue: 'file:///tmp/code-repo', description: 'Git URL')
        string(name: 'GIT_BRANCH', defaultValue: 'main', description: 'Main branch of repository')
        string(name: 'GIT_CRED_ID', defaultValue: '', description: 'Git credentials ID')

        separator(name: 'nexus_docker_settings', sectionHeader: 'NEXUS DDOCKER REGISTRY SETTINGS')
        string(name: 'NEXUS_DOCKER_REGISTRY', defaultValue: 'nexus:8081', description: 'Nexus docker registry URL')
        string(name: 'NEXUS_CRED_ID', defaultValue: 'nexus-cred', description: 'Nexus credentials ID')
        string(name: 'DOCKER_IMAGE', defaultValue: 'com.telenity.portal/portal-web:latest', description: 'Docker image name (e.g. com.telenity.portal/portal-web:latest). If not provided, it will be read from package.json')
        string(name: 'NEXUS_GROUP', defaultValue: 'com.telenity.portal', description: 'Nexus group')
        string(name: 'NEXUS_ARTIFACT_ID', defaultValue: '', description: 'Nexus artifact ID (e.g. portal-web). If not provided, it will be read from package.json')
        string(name: 'NEXUS_ARTIFACT_VERSION', defaultValue: '', description: 'Version of the artifact (e.g. 1.0.0). If not provided, it will be read from package.json')
    }

    environment {
        GIT_URL = "${params.GIT_URL}"
        GIT_BRANCH = "${params.GIT_BRANCH}"
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    echo "Checking out from ${env.GIT_URL} on branch ${env.GIT_BRANCH}"
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: env.GIT_BRANCH]],
                        extensions: [],
                        userRemoteConfigs: [[
                            url: env.GIT_URL,
                            credentialsId: params.GIT_CRED_ID ?: null
                        ]]
                    ])
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Build') {
            steps {
                sh 'npm run build'
            }
        }

        stage('Build-Scan-Push Docker Image') {
            steps {
                // Docker build
                // Trivia: https://www.jenkins.io/doc/book/pipeline/syntax/#docker
                // and push
                script {
                    dir("${WORKSPACE}/.release") {
                        sh "ls -al ../"

                        // properties içinde değer verilmemişse package.json'dan değerleri oku
                        def artifactId = params.NEXUS_ARTIFACT_ID ?: sh(script: 'jq -r .name ../package.json', returnStdout: true).trim()
                        def artifactVersion = params.NEXUS_ARTIFACT_VERSION ?: sh(script: 'jq -r .version ../package.json', returnStdout: true).trim()
                        // def groupPath = params.NEXUS_GROUP.replace('.', '/')
                        def groupPath = params.NEXUS_GROUP

                        def dockerImageName = params.DOCKER_IMAGE ?: "${params.NEXUS_DOCKER_REGISTRY}/${groupPath}/${artifactId}:${artifactVersion}"

                        sh """
                            cp -r ../dist/ ./
                            pwd
                            ls -al .
                            docker images
                            docker build \
                                -t ${dockerImageName} \
                                -f Dockerfile.release \
                                .
                            docker images
                        """

                        // --skip-update : "update database" ile uğraşmasın
                        // --severity HIGH,CRITICAL: sadece yüksek riskli açıklar gelsin
                        // --format json --output report.json: Raporu JSON formatında al
                        // --no-progress: Ekranda gereksiz loading barı çıkmasın
                        // --exit-code 1: Eğer hata bulursa exit 1 yapar ve Jenkins stage'ı FAIL olsun
                        def scanExitCode = sh(
                            script: """
                                trivy image \
                                    --ignorefile .trivyignore \
                                    --severity HIGH,CRITICAL \
                                    --ignore-unfixed \
                                    --no-progress \
                                    --exit-code 1 \
                                    ${dockerImageName}
                            """,
                            returnStatus: true // Return exit code but don't fail the build
                        )

                        // Raporu JSON formatında al ve ekrana yazdır (tee komutu ile)
                        sh "trivy image --format json ${dockerImageName} | tee trivy-report.json"

                        if (scanExitCode != 0) {
                            error("Trivy scan failed with exit code ${scanExitCode}")
                        }

                        // Push Docker image to registry
                        // docker.withRegistry("${params.NEXUS_DOCKER_REGISTRY}", "${params.NEXUS_CRED_ID}") {
                        //     echo "Pushing Docker image ${dockerImageName} to Nexus"
                        //     sh "docker image push ${dockerImageName}"
                        // }
 
                        withCredentials([usernamePassword(
                            credentialsId: "${params.NEXUS_CRED_ID}", 
                            usernameVariable: 'USERNAME', 
                            passwordVariable: 'PASSWORD')]) {
                            sh """
                                # docker login -u $USERNAME -p $PASSWORD http://nexus:8081
                                docker push ${dockerImageName}
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed. Cleaning up...'
        }
    }
}
